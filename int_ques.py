import streamlit as st
import google.generativeai as genai

# Function to fetch interview questions from Gemini API
def fetch_interview_questions(job_title, job_description, question_type, num_questions):
    """
    Fetches interview questions based on the user's input using the Gemini API.
    
    Args:
        job_title (str): The job title entered by the user.
        job_description (str): The job description entered by the user.
        question_type (str): The type of questions entered by the user.
        num_questions (int): The number of questions requested by the user.

    Returns:
        str: A list of interview questions generated by Gemini API.
    """
    prompt = f"""
    Generate {num_questions} {question_type} interview questions for a {job_title} role.
    Use the following job description to tailor the questions:
    
    Job Description: {job_description}

    Ensure the questions are relevant and aligned with the specified role and its responsibilities.
    Only generate the questions based on the given information with question mark. dont use any paranthesis.
    """
    
    try:
        model = genai.GenerativeModel('gemini-1.5-pro-latest')
        response = model.generate_content([prompt])
        return response.text
    except Exception as e:
        return f"Error fetching questions: {e}"

# Main Streamlit app
def main():
    # Configure the Gemini API key
    genai.configure(api_key="AIzaSyB46sAin3C4rTXYCmXkmfQho4fzNUMH6Rw")
    
    st.title("Interview Questions Generator")
    st.subheader("Prepare for interviews with tailored questions.")

    # Input fields for the user
    job_title = st.text_input("Enter the Job Title (e.g., Software Engineer, Data Scientist):")
    job_description = st.text_area("Enter the Job Description (Optional):", "")

    question_type = st.selectbox(
        "Select Question Type:", 
        ["Technical", "Behavioral", "Skill-based"]
    )

    num_questions = st.number_input(
        "Enter Number of Questions to Generate:", 
        min_value=1, max_value=50, step=1, value=10
    )

    # Button to generate questions
    if st.button("Generate Questions"):
        if not job_title or not job_description:
            st.warning("Please fill out all the required fields!")
        else:
            st.info(f"Generating {num_questions} {question_type} interview questions for {job_title}...")
            questions = fetch_interview_questions(job_title, job_description, question_type, num_questions)
            
            if questions.startswith("Error"):
                st.error(questions)
            else:
                st.success("Here are your interview questions:")
                st.write(questions)

# Run the app
if __name__ == "__main__":
    main()
